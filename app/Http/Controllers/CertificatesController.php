<?php

namespace App\Http\Controllers;

use Carbon\Carbon;
use function Couchbase\defaultDecoder;
use Illuminate\Http\Request;

use App\Http\Requests;
use \App;
use App\Settings;
use App\QuizResult;
use App\User;
use Illuminate\Support\Facades\Storage;
use PDF;
use Validator;
use URL;
use Session;
use Redirect;
use Auth;

class CertificatesController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * This method generates the certificates based on the sent slug
     * The certificate can be generated by the same user or by admin user
     * Based on the provided slug, verify the current user is the same user or parent user or admin
     * If any other tries to access the record we restrict that user to view the record
     * @param  [type] $result_slug [description]
     * @return [type]              [description]
     */


    public function generateViewCertificate(Request $request)
    {

        if (!getSetting('certificate', 'module')) {
            pageNotFound();
            return back();
        }
        $course_record = App\LmsSeries::where('id', '=', $request->id)->first();
        $current_user = Auth::User();
      //  echo  $current_user->id;
//dd($current_user);

        $payments = App\Payment::isItemPurchased($request->id, 'certificate-fee', $current_user->id);
        if ($payments == true) {
            $course_type = "free";
        } else {
            $course_type = "paid";
        }
        if($request->qid!=='0'){
            $qid=$request->qid;
            $course_type='paid';
        }else{
            $qid=0;
            $course_type='free';
        }
        $certificate_data = [];
        $certificate = App\Certificate::where('user_id','=',$current_user->id)
            ->where('course_id','=',$course_record->id)
            ->where('status','=','yes')
            ->where('certificate_file','!=','')->first();
         //$certificate = App\Certificate::where('user_id', $current_user->id)->where('course_id', $id)->first();
        if ($certificate) {
            $course_record = App\LmsSeries::where('id', '=', $certificate->course_id)->first();
            $user = User::find($certificate->user_id);
            $data['active_class'] = 'analysis';
            $data['result'] = $course_record;
            $data['user'] = $user;
            $data['awarded_date'] = $certificate->generated_date;
            $data['title'] = getPhrase('certificate_generation');
            $certificate_data['username'] = ucfirst($user->name);
            $certificate_code = $certificate->certificate_code;
            $data['certificate_code'] = $certificate_code;
            if(isset($course_record->certificate_title) && strlen(trim($course_record->certificate_title))>3)
                $certificate_title=$course_record->certificate_title;
            else
                $certificate_title=$course_record->title;
            $certificate_data['course_name'] = ucfirst($certificate_title);


        }
        else {
            $data['active_class'] = 'analysis';
            $data['result'] = $course_record;
            $data['user'] = $current_user;
            $data['awarded_date'] = date("d F Y", strtotime(Carbon::now()));
            $data['title'] = getPhrase('certificate_generation');
            $certificate_data['username'] = ucfirst($current_user->name);
            if(isset($course_record->certificate_title)  && strlen(trim($course_record->certificate_title))>3)
                $certificate_title=$course_record->certificate_title;
            else
                $certificate_title=$course_record->title;
            $certificate_data['course_name'] = ucfirst($certificate_title);



            $certificate_code = makeCertificateCode($current_user->id,$course_record->id,$qid);
            $data['certificate_code'] = $certificate_code;
            $certificate_data['certificate_code'] = $certificate_code;
            $certificate_data['awarded_date'] = date("d F Y", strtotime(Carbon::now()));



            $filename =  'Certificate_' . $certificate_code . '.pdf';

            if($course_type=='free') {
                $certificate = App\Certificate::where('user_id', '=', $current_user->id)
                    ->where('course_id', '=', $course_record->id)
                    ->where('transaction_id', '!=', '')->first();
            }else {
                $certificate = App\Certificate::where('user_id', '=', $current_user->id)
                    ->where('course_id', '=', $course_record->id)
                    ->where('course_type', '=', 'paid')->first();
                if(!$certificate)
                    $certificate = new App\Certificate();
            }
            $user=Auth::User();
            $certificate->user_id=$user->id;
            $certificate->course_id = $course_record->id;
            $certificate->certificate_code = $certificate_code;
            $certificate->course_type = $course_type;
            $certificate->user_name = $user->name;
            $certificate->user_email = $user->email;
            $certificate->user_phone = $user->phone;
            $certificate->generated_date= Carbon::now()->toDateTimeString();
            $certificate->certificate_file =$filename;

            $certificate->save();
            $content = \Blade::compileString($this->getContentTemplate());
            $result = $this->render($content, $certificate_data);
            $data['content'] = $result;

            $view_name2 = getTheme() . '::exams.certificates.free_template';
            $pdf = PDF::setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true])->loadView($view_name2, $data);


            if (env('FILESYSTEM_DRIVER') == 's3') {


                $filePath = 'lms/certificate/' . $filename;
                Storage::disk('s3')->put($filePath,  $pdf->output(),'public');
            } else {
                if (!empty($pdf)) {
                    (file_exists('public/uploads/certificate/' . $filename)) ? unlink('public/uploads/certificate/' . $filename) : "";
                }
                $pdf->move('public/uploads/certificate', $pdf->output());
            }


        }
        $certificate_file = UPLOADS. 'lms/certificate/' .$certificate->certificate_file;
        $html = view(getTheme() . '::exams.certificates.view_certificate',compact('certificate_file','course_type'))->render();

        return response()->json(['html'=>$html]);

    }



    public function regenerateCertificate(Request $request)
    {

        if (!getSetting('certificate', 'module')) {
            pageNotFound();
            return back();
        }

        $certificate_data = [];
        $certificate = App\Certificate::where('id','=',$request->certid)->first();
        $current_user = User::find($certificate->user_id);
        $course_record = App\LmsSeries::where('id', '=', $certificate->course_id)->first();

        $course_type=$certificate->course_type;

        $data['active_class'] = 'analysis';
        $data['result'] = $course_record;
        $data['user'] = $current_user;
        $data['awarded_date'] = date("d F Y", strtotime(Carbon::now()));
        $data['title'] = getPhrase('certificate_generation');
        $certificate_data['username'] = ucfirst($certificate->user_name);
        if(isset($course_record->certificate_title) && strlen(trim($course_record->certificate_title))>3) {
            $certificate_title = $course_record->certificate_title;
        }else{
            $certificate_title=$course_record->title;
        }

        $certificate_data['course_name'] = ucfirst($certificate_title);



        $certificate_code = $certificate->certificate_code;
        $data['certificate_code'] = $certificate_code;
        $certificate_data['certificate_code'] = $certificate_code;
        $certificate_data['awarded_date'] = date("d F Y", strtotime(Carbon::now()));



        $filename =  'Certificate_' . $certificate_code . '.pdf';

        //dd($certificate_data);

        $content = \Blade::compileString($this->getContentTemplate());
        $result = $this->render($content, $certificate_data);
        $data['content'] = $result;

        $view_name2 = getTheme() . '::exams.certificates.free_template';
        $pdf = PDF::setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true])->loadView($view_name2, $data);


        if (env('FILESYSTEM_DRIVER') == 's3') {
            $filePath = 'lms/certificate/' . $filename;
            Storage::disk('s3')->put($filePath,  $pdf->output(),'public');
        } else {
            if (!empty($pdf)) {
                (file_exists('public/uploads/certificate/' . $filename)) ? unlink('public/uploads/certificate/' . $filename) : "";
            }
            $pdf->move('public/uploads/certificate', $pdf->output());
        }
        $certificate->certificate_code = $certificate_code;
        $certificate->generated_date= Carbon::now()->toDateTimeString();
        $certificate->certificate_file =$filename;

        $certificate->save();


        $certificate_file = UPLOADS. 'lms/certificate/' .$certificate->certificate_file;
        $html = view(getTheme() . '::exams.certificates.regenerate_certificate',compact('certificate_file','course_type'))->render();

        return response()->json(['html'=>$html]);

    }



    public function getCertificate($result_slug)
    {


        if (!getSetting('certificate', 'module')) {
            pageNotFound();
            return back();
        }

        $record = QuizResult::where('slug', $result_slug)->get()->first();


        if ($isValid = $this->isValidRecord($record))
            return redirect($isValid);

        $user = getUserRecord($record->user_id);

        $quiz_record = App\Quiz::where('id', '=', $record->quiz_id)->first();
        $exam_record = App\LmsSeriesExams::where('exam_quiz_id', '=', $record->quiz_id)->first();
        $course_record = App\LmsSeries::where('id', '=', $exam_record->lmsseries_id)->first();
        $current_user = Auth::User();
        //$certificate_code = str_pad($current_user->id, 5, '0', STR_PAD_LEFT) . '-' . str_pad($course_record->id, 5, '0', STR_PAD_LEFT) . '-' . str_pad($quiz_record->id, 4, '0', STR_PAD_LEFT);
        $certificate_code = makeCertificateCode($current_user->id,$course_record->id,$quiz_record->id);
        /**
         * Make sure the Admin or staff cannot edit the Admin/Owner accounts
         * Only Owner can edit the Admin/Owner profiles
         * Admin can edit his own account, in that case send role type admin on condition
         */

        $UserOwnAccount = FALSE;
        if ($current_user->id == $user->id)
            $UserOwnAccount = TRUE;

        if (!$UserOwnAccount) {
            $current_user_role = getRoleData($$current_user->role_id);

            if ((($current_user_role == 'admin' || $current_user_role == 'owner'))) {
                if (!checkRole(getUserGrade(1))) {
                    prepareBlockUserMessage();
                    return back();
                }
            }
        }


        $data['active_class'] = 'analysis';
        $data['result'] = $record;
        $data['user'] = $user;
        $data['certificate_code'] = $certificate_code;
        $data['awarded_date'] = date("m, Y", strtotime($record->updated_at));

        $certificate_data = [];
        $certificate_data['username'] = ucfirst($user->name);
        $certificate_data['course_name'] = ucfirst($course_record->title);

        $certificate_data['marks'] = $record->marks_obtained . ' (' . $record->percentage . '%)';

        $content = \Blade::compileString($this->getContentTemplate());

        $result = $this->render($content, $certificate_data);


        $data['content'] = $result;

        $data['title'] = getPhrase('certificate_generation');
//dd($data);
        // return view('exams.certificates.template', $data);


        $data2 = [
            'title' => 'First PDF for Medium',
            'heading' => 'Hello from 99Points.info',
            'content' => 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.'
        ];


        $view_name2 = getTheme() . '::exams.certificates.template';
        //$view_name2 = getTheme().'::exams.certificates.templatetest';

        //  return view($view_name2, $data);
        $pdf = PDF::setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true])->loadView($view_name2, $data);
        return $pdf->download('Certificate_' . $certificate_code . '.pdf');
    }

    /**
     * Returns the template html code by forming header, body and footer
     * @param  [type] $template [description]
     * @return [type]           [description]
     */
    public function getContentTemplate()
    {

        $content = getSetting('content', 'certificate');

        $view = \View::make(getTheme() . '::exams.certificates.content-template', [
            'content' => $content,
        ]);

        return $view->render();
    }

    /**
     * Prepares the view from string passed along with data
     * @param  [type] $__php  [description]
     * @param  [type] $__data [description]
     * @return [type]         [description]
     */
    public function render($__php, $__data)
    {
        $obLevel = ob_get_level();
        ob_start();
        extract($__data, EXTR_SKIP);
        try {
            eval('?' . '>' . $__php);
        } catch (Exception $e) {
            while (ob_get_level() > $obLevel) ob_end_clean();
            throw $e;
        } catch (Throwable $e) {
            while (ob_get_level() > $obLevel) ob_end_clean();
            throw new FatalThrowableError($e);
        }
        return ob_get_clean();
    }

    public function isValidRecord($record)
    {
        if ($record === null) {
            flash('Ooops...!', getPhrase("page_not_found"), 'error');
            return $this->getRedirectUrl();
        }

        return FALSE;
    }

    public function getReturnUrl()
    {
        return PREFIX;
    }
}
